import { useState, useEffect } from 'react';
import { useToast } from '@/components/ui/Toast';
import { Link, useLocation } from 'react-router-dom';
import RfidDevices from './RfidDevicesPage';
import PassportForm, { PassportFormData } from '@/components/PassportForm';

interface Photo {
  id: number;
  file_name: string;
  content_type: string;
  created_at: string;
  url?: string;
  image_data?: string;
}

interface Regula {
  id: number;
  name: string;
  last_name: string;
  first_name: string;
  middle_name: string;
  birth_date: string;
  issue_date: string;
  series: string;
  number: string;
  department_code: string;
  issued_by: string;
  birth_place: string;
  gender: string;
  photo_id: number | null;
  created_at: string;
  updated_at: string;
  photo: Photo | null;
}

const BACKEND_URL = `${window.location.protocol}//${window.location.hostname}:8000`;
const API_URL = `${BACKEND_URL}/api/v1/regula`;
const PHOTOS_API_URL = `${API_URL}/photos`;

const DevicesPage = () => {
  const [devices, setDevices] = useState<Regula[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);
  const [selectedDevice, setSelectedDevice] = useState<Regula | null>(null);
  const [photos, setPhotos] = useState<Photo[]>([]);
  const [isLoadingPhotos, setIsLoadingPhotos] = useState<boolean>(false);
  const { showToast } = useToast();

  // Fetch devices on component mount
  useEffect(() => {
    fetchDevices();
  }, []);

  const fetchDevices = async () => {
    try {
      setIsLoading(true);
      const response = await fetch(API_URL);
      if (!response.ok) throw new Error('Failed to fetch devices');
      const data = await response.json();
      setDevices(data);
    } catch (error) {
      console.error('Error fetching devices:', error);
      showToast('Failed to load devices', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const handleFormSubmit = async (data: PassportFormData) => {
    try {
      const method = selectedDevice ? 'PUT' : 'POST';
      const url = selectedDevice ? `${API_URL}/${selectedDevice.id}` : API_URL;
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) throw new Error('Failed to save device');
      
      showToast(`Device ${selectedDevice ? 'updated' : 'created'} successfully`, 'success');
      setIsFormOpen(false);
      fetchDevices();
    } catch (error) {
      console.error('Error saving device:', error);
      showToast('Failed to save device', 'error');
    }
  };

  const handleDeleteDevice = async (id: number) => {
    if (!window.confirm('Are you sure you want to delete this device?')) return;
    
    try {
      const response = await fetch(`${API_URL}/${id}`, {
        method: 'DELETE',
      });

      if (!response.ok) throw new Error('Failed to delete device');
      
      showToast('Device deleted successfully', 'success');
      fetchDevices();
    } catch (error) {
      console.error('Error deleting device:', error);
      showToast('Failed to delete device', 'error');
    }
  };

  const handleEditDevice = (device: Regula) => {
    setSelectedDevice(device);
    setIsFormOpen(true);
  };

  const handleAddDevice = () => {
    setSelectedDevice(null);
    setIsFormOpen(true);
  };

  const handleCloseForm = () => {
    setIsFormOpen(false);
    setSelectedDevice(null);
  };

  const location = useLocation();
  if (location.pathname === '/devices/rfid') {
    return <RfidDevices />;
  }

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Passport Devices</h1>
        <button
          onClick={handleAddDevice}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
        >
          Add Device
        </button>
      </div>

      {isLoading ? (
        <div>Loading devices...</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white">
            <thead>
              <tr>
                <th className="py-2 px-4 border-b">ID</th>
                <th className="py-2 px-4 border-b">Name</th>
                <th className="py-2 px-4 border-b">Passport</th>
                <th className="py-2 px-4 border-b">Actions</th>
              </tr>
            </thead>
            <tbody>
              {devices.map((device) => (
                <tr key={device.id}>
                  <td className="py-2 px-4 border-b">{device.id}</td>
                  <td className="py-2 px-4 border-b">
                    {device.last_name} {device.first_name} {device.middle_name}
                  </td>
                  <td className="py-2 px-4 border-b">
                    {device.series} {device.number}
                  </td>
                  <td className="py-2 px-4 border-b">
                    <button
                      onClick={() => handleEditDevice(device)}
                      className="text-blue-600 hover:text-blue-800 mr-3"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDeleteDevice(device.id)}
                      className="text-red-600 hover:text-red-800"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {isFormOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-white p-6 rounded-lg w-full max-w-2xl">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">
                {selectedDevice ? 'Edit Device' : 'Add New Device'}
              </h2>
              <button onClick={handleCloseForm} className="text-gray-500 hover:text-gray-700">
                âœ•
              </button>
            </div>
            <PassportForm
              initialData={selectedDevice}
              onSubmit={handleFormSubmit}
              onCancel={handleCloseForm}
              onPhotoUploaded={(newPhoto) => {
                setFormData(prev => ({
                  ...prev,
                  photo_id: newPhoto.id
                }));
              }}
              isLoadingPhotos={isLoadingPhotos}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default DevicesPage;
